{"version":3,"sources":["searchTree.js","wordTree.js","wordCloud.js","main.js","serviceWorker.js","index.js"],"names":["SearchTree","data","JSON","parse","stringify","this","props","dfs","node","callback","precall","undefined","length","children","i","value","title","showSearch","style","width","size","dropdownStyle","maxHeight","overflow","treeData","placeholder","onChange","Component","node_id","add_id","parent_id","id","preCall","WordTree","preProcess","id_to_node","fontSize","Math","min","sqrt","freq","hasChild","label","show","fontWeight","path","concat","name","level","currentLevel","nextLevel","push","depth","max","space","state","originData","getOption","tooltip","trigger","triggerOn","textStyle","lineHeight","series","type","top","left","bottom","right","orient","symbolSize","position","verticalAlign","align","formatter","params","words","split","slice","join","reverse","leaves","initialTreeDepth","expandAndCollapse","animationDuration","animationDurationUpdate","onClick","console","log","clicked_id","newData","current_node","parent_node","setState","depthAndSpace","height","onEvents","a","b","option","current_state","positive","Array","prototype","SentimentWords","map","x","negative","Shape","registerShape","drawShape","cfg","container","attrs","_","assign","fillOpacity","opacity","origin","_origin","rotate","text","textAlign","fontFamily","font","fill","color","textBaseline","getTextAttrs","addShape","y","Wordcloudmask","dv","DataSet","View","source","range","imageMask","Image","crossOrigin","src","img","onload","transform","fields","padding","timeInterval","random","d","divisor","scale","nice","onPointClick","showTitle","reflect","shape","React","defaultProps","publicUrl","window","innerWidth","positiveWords","sentimentWords","negativeWords","Main","selectedWord","selectedType","wordTree","className","Group","buttonStyle","e","target","Button","wordTrees","onWordSelect","selectedWords","indexOf","justify","span","bind","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4i97BAiBaA,EAAb,iLAGQ,IAAIC,EAAOC,KAAKC,MAAMD,KAAKE,UAAUC,KAAKC,MAAML,OAIhD,OArBI,SAANM,EAAOC,EAAMC,GAA8B,IAApBC,IAAmB,yDAC5C,QAAoBC,IAAhBH,EAAKI,OAKLF,GACAD,EAASD,GACTA,EAAKK,UACLN,EAAIC,EAAKK,SAAUJ,EAAUC,GAC5BA,GACDD,EAASD,QATT,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAAKI,OAAQE,IAC7BP,EAAIC,EAAKM,GAAIL,EAAUC,GAe3BH,CAAIN,GAAM,SAACO,GACPA,EAAKO,MAAQP,EAAKQ,SAGlB,uBACIC,YAAU,EACVC,MAAO,CAACC,MAAO,KACfC,KAAK,QACLL,MAAOV,KAAKC,MAAMS,MAClBM,cAAe,CAACC,UAAW,IAAKC,SAAU,QAC1CC,SAAUvB,EACVwB,YAAapB,KAAKC,MAAMmB,YACxBC,SAAUrB,KAAKC,MAAMoB,eAhBrC,GAAgCC,a,kBCd5BC,EAAU,EAEd,SAASC,EAAO5B,GAAyB,IAAnB6B,EAAkB,uDAAN,KAC9B,QAAoBnB,IAAhBV,EAAKW,OAKHX,EAAK8B,KACP9B,EAAK8B,GAAKH,EACV3B,EAAK6B,UAAYA,EACjBF,GAAW,GAEX3B,EAAKY,UACLgB,EAAO5B,EAAKY,SAAUZ,EAAK8B,SAV3B,IAAK,IAAIjB,EAAI,EAAGA,EAAIb,EAAKW,OAAQE,IAC7Be,EAAO5B,EAAKa,GAAIgB,GAa5B,SAASvB,EAAIC,EAAMC,GAA2B,IAAjBuB,IAAgB,yDAGzC,GAFIA,GACAvB,EAASD,GACTA,EAAKK,SACL,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAKK,SAASD,OAAQE,IACtCP,EAAIC,EAAKK,SAASC,GAAIL,EAAUuB,GACnCA,GACDvB,EAASD,GAGV,I,IAAMyB,EAAb,2MACIC,WAAa,SAACjC,GAA0B,wDAAC,IACjCkC,EAAa,GACjBN,EAAO5B,GACPM,EAAIN,GAAM,SAACO,GACP2B,EAAW3B,EAAKuB,IAAMvB,EACtB,IAAM4B,EAAWC,KAAKC,IAAI,EAAI,EAAID,KAAKE,KAAK/B,EAAKgC,MAAO,IACpDC,GAAW,EACTjC,EAAKK,UAAsC,IAAzBL,EAAKK,SAASD,SAClC6B,GAAW,GACfjC,EAAKkC,MAAQ,CACTC,MAAM,EACNP,SAAUA,EACVQ,WAAYH,EAAW,SAAW,aAG1ClC,EAAIN,GAAM,SAACO,GACDA,EAAKsB,UAIXtB,EAAKqC,KAAOV,EAAW3B,EAAKsB,WAAWe,KAAKC,OAAOtC,EAAKuC,MAHpDvC,EAAKqC,KAAO,CAACrC,EAAKuC,SAIvB,GAKH,IAJA,IAAIC,EAAQ,EAERC,EAAe,CAAChD,GAChBiD,EAAY,GACqBD,EAAarC,OAAS,GAAG,CAE1D,IAAK,IAAIE,EAAI,EAAGA,EAAImC,EAAarC,OAAQE,IAAK,CAAC,IAAD,EAC1CmC,EAAanC,GAAGkC,MAAQA,EACpBC,EAAanC,GAAGD,WAChB,EAAAqC,GAAUC,KAAV,oBAAkBF,EAAanC,GAAGD,WAE1CoC,EAAeC,EACfA,EAAY,GACZF,GAAS,EAEb,IAAMI,EAAQf,KAAKgB,IAAIL,EAAQ,EAAG,GAC9BM,EAAQ,EAOZ,OANA/C,EAAIN,GAAM,SAACO,GACDA,EAAKwC,QAEPxC,EAAKwC,QAAUI,GAAW5C,EAAKK,UAAsC,IAAzBL,EAAKK,SAASD,SAC1D0C,GAAgB9C,EAAKkC,MAAMN,cAE5B,CAACgB,MAAOf,KAAKgB,IAAIL,EAAQ,EAAG,GAAIM,MAAOjB,KAAKgB,IAAIC,EAAO,MA9CtE,EAgDIC,MAAQ,CAACtD,KAAM,EAAKK,MAAMkD,WAAYA,WAAY,EAAKlD,MAAMkD,YAhDjE,EAiDIC,UAAY,SAACxD,EAAMmD,GACf,MAAO,CACHM,QAAS,CACLC,QAAS,OACTC,UAAW,YACXC,UAAW,CACPzB,SAAU,GACV0B,WAAY,MAGpBC,OAAQ,CACJ,CACIC,KAAM,OACN/D,KAAM,CAACA,GACPgE,IAAK,KACLC,KAAM,MAENC,OAAQ,KACRC,MAAO,MAEPC,OAAQ,EAAK/D,MAAM+D,OAEnBC,WAAY,EAGZ5B,MAAO,CACH6B,SAAgC,OAAtB,EAAKjE,MAAM+D,OAAkB,OAAS,QAChDG,cAAe,SACfC,MAA6B,OAAtB,EAAKnE,MAAM+D,OAAkB,QAAU,OAC9CK,UAAW,SAACC,GACR,IAAIC,EAAQD,EAAO1E,KAAK8C,KAAK8B,MAAM,KAOnC,OANID,EAAMhE,OAAS,IAEXgE,EADsB,OAAtB,EAAKtE,MAAM+D,OACHO,EAAME,MAAM,EAAG,GAAGhC,OAAO,OAEzB,CAAC,OAAOA,OAAO8B,EAAME,MAAMF,EAAMhE,OAAS,EAAGgE,EAAMhE,UAE5DgE,EAAMG,KAAK,OAG1BrB,QAAS,CACLgB,UAAW,SAACC,GAGR,MAAO,SAFMA,EAAO1E,KAAKuC,KAEA,MADa,OAAtB,EAAKlC,MAAM+D,OAAkBM,EAAO1E,KAAK4C,KAAKkC,KAAK,KAAO,YAAIJ,EAAO1E,KAAK4C,MAAMmC,UAAUD,KAAK,QAIvHE,OAAQ,CACJvC,MAAO,CACH6B,SAAgC,OAAtB,EAAKjE,MAAM+D,OAAkB,QAAU,OACjDG,cAAe,SACfC,MAA6B,OAAtB,EAAKnE,MAAM+D,OAAkB,OAAS,UAGrDa,iBAAkB9B,EAClB+B,mBAAmB,EACnBC,kBAAmB,IACnBC,wBAAyB,QA1G7C,EA+GIC,QAAU,SAACX,GACPY,QAAQC,IAAIb,GACZ,IAAIc,EAAad,EAAO1E,KAAK8B,GACzB2D,EAAUxF,KAAKC,MAAMD,KAAKE,UAAU,EAAKE,MAAMkD,aAC/CrB,EAAa,GACjB5B,EAAImF,GAAS,SAAClF,GACV2B,EAAW3B,EAAKuB,IAAMvB,KAG1B,IADA,IAAImF,EAAexD,EAAWsD,GACI,OAA3BE,EAAa7D,WAAoB,CACpC,IAAI8D,EAAczD,EAAWwD,EAAa7D,WAC1C8D,EAAY/E,SAAW,CAAC8E,GACxBA,EAAeC,EAEnB,EAAKC,SAAS,CAAC5F,KAAMyF,KA7H7B,wEA0IQ,IAAIzF,EAAOI,KAAKkD,MAAMtD,KAChB6F,EAAgBzF,KAAK6B,WAAWjC,EAAM,IACtCmD,EAAQ0C,EAAc1C,MACtB2C,EAAS,IAAMD,EAAcxC,MAG/B0C,EAAW,CACX,MAAS3F,KAAKiF,QACd,aAAgB,SAACW,EAAGC,GAChBX,QAAQC,IAAIS,GACZV,QAAQC,IAAIU,KAGpB,OACI,6BACI,kBAAC,IAAD,CACIC,OAAQ9F,KAAKoD,UAAUxD,EAAMmD,GAC7BlC,MAAO,CAAC6E,OAAQA,EAAQ5E,MAAO,QAC/B6E,SAAUA,QA5J9B,gDAgIoC1F,EAAO8F,GACnC,OAAIA,EAAc5C,aAAelD,EAAMkD,WAC5B,CACHvD,KAAMK,EAAMkD,WACZA,WAAYlD,EAAMkD,YAEnB,SAtIf,GAA8B7B,a,oDCzBjB0E,GAAW,EAAAC,MAAMC,WAAUzD,OAAhB,oBAA0B0D,EAAeH,SAASI,KAAI,SAAAC,GAAC,OAAIA,EAAE7F,cACxE8F,GAAW,EAAAL,MAAMC,WAAUzD,OAAhB,oBAA0B0D,EAAeG,SAASF,KAAI,SAAAC,GAAC,OAAIA,EAAE7F,cAuBrF+F,QAAMC,cAAc,QAAS,QAAS,CAClCC,UADkC,SACxBC,EAAKC,GACX,IAAMC,EApBd,SAAsBF,GAClB,OAAOG,IAAEC,OACL,GACAJ,EAAI7F,MACJ,CACIkG,YAAaL,EAAIM,QACjBjF,SAAU2E,EAAIO,OAAOC,QAAQnG,KAC7BoG,OAAQT,EAAIO,OAAOC,QAAQC,OAC3BC,KAAMV,EAAIO,OAAOC,QAAQE,KACzBC,UAAW,SACXC,WAAYZ,EAAIO,OAAOC,QAAQK,KAC/BC,KAAMd,EAAIe,MACVC,aAAc,eAQJC,CAAajB,GAC3B,OAAOC,EAAUiB,SAAS,OAAQ,CAC9BhB,MAAOC,IAAEC,OAAOF,EAAO,CACnBP,EAAGK,EAAIL,EACPwB,EAAGnB,EAAImB,SAMhB,IAAMC,EAAb,YACI,WAAY7H,GAAQ,IAAD,8BACf,4CAAMA,KACDiD,MAAQ,CACT6E,GAAI,MAHO,EADvB,iFAQyB,IAAD,OACVA,GAAK,IAAIC,IAAQC,MAAOC,OAAOlI,KAAKC,MAAML,MAC1CuI,EAAQJ,EAAGI,MAAM,QACjBlG,EAAMkG,EAAM,GACZnF,EAAMmF,EAAM,GACZC,EAAY,IAAIC,MACtBD,EAAUE,YAAc,KACxBF,EAAUG,IAAMvI,KAAKC,MAAMuI,IAG3BJ,EAAUK,OAAS,WACfV,EAAGW,UAAU,CACT/E,KAAM,YACNgF,OAAQ,CAAC,QAAS,QAClBP,YACAb,KAAM,UACNxG,KAAM,CAAC,EAAKd,MAAMc,KAAM,EAAKd,MAAMc,MAEnC6H,QAAS,EACTC,aAAc,IAGd1B,OAXS,WAYL,IAAI2B,KAA4B,EAAhB9G,KAAK8G,UAAgB,EAMrC,OAJe,IAAXA,IACAA,EAAS,GAGG,GAATA,GAGX/G,SArBS,SAqBAgH,GACL,IAAMC,EAAWhG,EAAMf,IAAS,EAAKe,EAAMf,EAAO,EAClD,OAAS8G,EAAErI,MAAQuB,GAAO+G,EAAnB,GAA0C,MAGzD,EAAKxD,SAAS,CACVuC,UA9ChB,+BAmDc,IAAD,OACEA,EAAM/H,KAAKkD,MAAX6E,GASP,OAAKA,EACE,6BACH,kBAAC,QAAD,CACIjH,MAAOd,KAAKC,MAAMc,KAClB2E,OAAQ1F,KAAKC,MAAMc,KACnBnB,KAAMmI,EACNkB,MAdM,CACV5C,EAAG,CACC6C,MAAM,GAEVrB,EAAG,CACCqB,MAAM,IAUNN,QAAS,EACTO,aAAc,SAACJ,GAAD,OAAO,EAAK9I,MAAMoB,SAAS0H,EAAEnJ,KAAKsH,QAAQvG,SAGxD,kBAAC,UAAD,CAASyI,WAAW,IACpB,kBAAC,QAAD,CAAOC,QAAQ,MACf,kBAAC,OAAD,CAAM1F,KAAK,QAAQO,SAAS,MAAMuD,MAAM,OAAO6B,MAAOtJ,KAAKC,MAAMqJ,MAAOjG,QAAQ,WAbxE,SA7DxB,GAAmCkG,IAAMjI,WA0FzCwG,EAAc0B,aAAe,CAAC5J,KAAMoG,EAAUwC,IA3HlBiB,6BA2HqC1I,KAAM2I,OAAOC,WAAa,EAAGL,MAAO,S,iBC3H/FM,GAAgB,EAAA3D,MAAMC,WAAUzD,OAAhB,oBAA0BoH,EAAe7D,SAASI,KAAI,SAAAC,GAAC,OAAIA,EAAE7F,cAAW4F,KAAI,SAAAjG,GAAI,OAAIA,EAAKQ,SACzGmJ,GAAgB,EAAA7D,MAAMC,WAAUzD,OAAhB,oBAA0BoH,EAAevD,SAASF,KAAI,SAAAC,GAAC,OAAIA,EAAE7F,cAAW4F,KAAI,SAAAjG,GAAI,OAAIA,EAAKQ,SAElGoJ,EAAb,2MACI7G,MAAQ,CACJ8G,aAAc,KACdC,aAAc,WACdjG,OAAQ,SAJhB,EAOIkG,SAAW,WACP,IAAM,EAAKhH,MAAM8G,aACb,OAAO,8BACX,IAAMhG,EAA+B,WAAtB,EAAKd,MAAMc,OAAsB,KAAO,KACvD,OACI,yBAAKmG,UAAU,UACX,6CAAmB,EAAKjH,MAAM+G,aAA9B,mBAA4D,EAAK/G,MAAM8G,cACvE,sBAAOI,MAAP,CAAaC,YAAY,QAAQtJ,KAAK,QAAQM,SAAU,SAAAiJ,GAAC,OAAI,EAAK9E,SAAS,CAACxB,OAAQsG,EAAEC,OAAO7J,SAChFA,MAAO,EAAKwC,MAAMc,QAC3B,sBAAOwG,OAAP,CAAc9J,MAAM,UAApB,gBAA2C,EAAKwC,MAAM8G,cACtD,sBAAOQ,OAAP,CAAc9J,MAAM,SAApB,eAAyC,EAAKwC,MAAM8G,eAExD,kBAAC,EAAD,CAAU7G,WAAYsH,EAAU,EAAKvH,MAAM+G,cAAc,EAAK/G,MAAM8G,cAAc,EAAK9G,MAAMc,QACnFA,OAAQA,MApBlC,EAwBI0G,aAAe,SAACC,GACZ,GAAKA,GAA0C,IAAzBA,EAAcpK,OAE/B,CACD,IAAMyJ,EAAeW,EAAc,GAC7BV,EAAeL,EAAcgB,QAAQZ,IAAiB,EAAI,WAAaF,EAAcc,QAAQZ,IAAiB,EAAI,WAAa,KAChH,OAAjBC,EACA,EAAKzE,SAAS,CAACwE,aAAc,KAAMC,aAAc,OAEjD,EAAKzE,SAAS,CAACwE,eAAcC,sBAPjC,EAAKzE,SAAS,CAACwE,aAAc,QA1BzC,EAoCI3I,SAAW,SAAAX,GACP,GAAKA,EAEA,CACD,IAAMsJ,EAAetJ,EACfuJ,EAAeL,EAAcgB,QAAQZ,IAAiB,EAAI,WAAaF,EAAcc,QAAQZ,IAAiB,EAAI,WAAa,KAChH,OAAjBC,EACA,EAAKzE,SAAS,CAACwE,aAAc,KAAMC,aAAc,OAEjD,EAAKzE,SAAS,CAACwE,eAAcC,sBAPjC,EAAKzE,SAAS,CAACwE,aAAc,QAtCzC,wEAkDQ,OACI,6BACI,yBAAKtI,GAAG,cACJ,uBAAKiC,KAAK,OAAOkH,QAAQ,gBAKrB,uBAAKC,KAAM,EAAGX,UAAU,UACpB,2BAAS,+CACT,kBAAC,EAAD,CAAYvK,KAAMiK,EAAe7D,SAAUtF,MAAOV,KAAKkD,MAAMxC,MACjDW,SAAUrB,KAAKqB,SAAS0J,KAAK/K,MAAOoB,YAAY,2BAC5D,kBAAC,EAAD,CAAexB,KAAMoG,EAAUwC,IDjE/BiB,6BCiEkDH,MAAM,QACzCvI,KAAM,IACNM,SAAUrB,KAAKqB,SAAS0J,KAAK/K,SAEhD,uBAAK8K,KAAM,EAAGX,UAAU,UACpB,2BAAS,+CACT,kBAAC,EAAD,CAAYvK,KAAMiK,EAAevD,SAAU5F,MAAOV,KAAKkD,MAAMxC,MACjDW,SAAUrB,KAAKqB,SAAS0J,KAAK/K,MAAOoB,YAAY,2BAC5D,kBAAC,EAAD,CAAexB,KAAM0G,EAAUkC,IDxE/BiB,6BCwEkDH,MAAM,QACzCvI,KAAM,IACNM,SAAUrB,KAAKqB,SAAS0J,KAAK/K,WAIxD,yBAAK0B,GAAG,YACH1B,KAAKkK,iBA7E1B,GAA0B5I,aCApB0J,G,OAAcC,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5I,QACfsI,UAAUC,cAAcQ,YAI1B/G,QAAQC,IACN,iHAKEoG,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlB1G,QAAQC,IAAI,sCAGRoG,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAC,GACLnH,QAAQmH,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,YAAwBjD,OAAOwB,SAAS0B,MACpD3F,SAAWyC,OAAOwB,SAASjE,OAIvC,OAGFyC,OAAOmD,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,YAAN,sBAEP3B,IAgEV,SAAiCM,EAAOC,GAEtCuB,MAAMxB,GACHK,MAAK,SAAAoB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYpC,QAAQ,cAG5CY,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BjC,OAAOwB,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLlH,QAAQC,IACN,oEArFAoI,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjCzG,QAAQC,IACN,iHAMJkG,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.655f7687.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {TreeSelect} from 'antd';\r\n\r\nconst dfs = (node, callback, precall = true) => {\r\n    if (node.length !== undefined) {\r\n        for (let i = 0; i < node.length; i++)\r\n            dfs(node[i], callback, precall);\r\n        return;\r\n    }\r\n    if (precall)\r\n        callback(node);\r\n    if (node.children)\r\n        dfs(node.children, callback, precall);\r\n    if (!precall)\r\n        callback(node);\r\n};\r\n\r\nexport class SearchTree extends Component {\r\n\r\n    render() {\r\n        let data = JSON.parse(JSON.stringify(this.props.data)); //deep copy\r\n        dfs(data, (node) => {\r\n            node.value = node.title\r\n        });\r\n        return (\r\n            <TreeSelect\r\n                showSearch\r\n                style={{width: 300}}\r\n                size='large'\r\n                value={this.props.value}\r\n                dropdownStyle={{maxHeight: 400, overflow: 'auto'}}\r\n                treeData={data}\r\n                placeholder={this.props.placeholder}\r\n                onChange={this.props.onChange}\r\n            />\r\n        );\r\n    }\r\n\r\n}","import React, {Component} from 'react'\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\nlet node_id = 1;\r\n\r\nfunction add_id(data, parent_id = null) {\r\n    if (data.length !== undefined) {\r\n        for (let i = 0; i < data.length; i++)\r\n            add_id(data[i], parent_id);\r\n        return;\r\n    }\r\n    if (!(data.id)) {\r\n        data.id = node_id;\r\n        data.parent_id = parent_id;\r\n        node_id += 1;\r\n    }\r\n    if (data.children)\r\n        add_id(data.children, data.id);\r\n\r\n}\r\n\r\nfunction dfs(node, callback, preCall = true) {\r\n    if (preCall)\r\n        callback(node);\r\n    if (node.children)\r\n        for (let i = 0; i < node.children.length; i++)\r\n            dfs(node.children[i], callback, preCall);\r\n    if (!preCall)\r\n        callback(node);\r\n}\r\n\r\nexport class WordTree extends Component {\r\n    preProcess = (data, maxShowNum = 50) => {\r\n        let id_to_node = {};\r\n        add_id(data);\r\n        dfs(data, (node) => {\r\n            id_to_node[node.id] = node;\r\n            const fontSize = Math.min(5 + 5 * Math.sqrt(node.freq), 30);\r\n            let hasChild = true;\r\n            if (!(node.children) || node.children.length === 0)\r\n                hasChild = false;\r\n            node.label = {\r\n                show: true,\r\n                fontSize: fontSize,\r\n                fontWeight: hasChild ? 'bolder' : 'normal'\r\n            };\r\n        });\r\n        dfs(data, (node) => {\r\n            if (!(node.parent_id)) {\r\n                node.path = [node.name];\r\n                return;\r\n            }\r\n            node.path = id_to_node[node.parent_id].path.concat(node.name);\r\n        }, true);\r\n        let level = 0;\r\n        // let totalNode = 0;\r\n        let currentLevel = [data];\r\n        let nextLevel = [];\r\n        while (/*totalNode < maxShowNum &&*/ currentLevel.length > 0) {\r\n            // totalNode += currentLevel.length;\r\n            for (let i = 0; i < currentLevel.length; i++) {\r\n                currentLevel[i].level = level;\r\n                if (currentLevel[i].children)\r\n                    nextLevel.push(...currentLevel[i].children);\r\n            }\r\n            currentLevel = nextLevel;\r\n            nextLevel = [];\r\n            level += 1;\r\n        }\r\n        const depth = Math.max(level - 1, 1);\r\n        let space = 0;\r\n        dfs(data, (node) => {\r\n            if (!(node.level))\r\n                return;\r\n            if (node.level === depth || !(node.children) || node.children.length === 0)\r\n                space = space + node.label.fontSize;\r\n        });\r\n        return {depth: Math.max(level - 1, 1), space: Math.max(space, 50)};\r\n    };\r\n    state = {data: this.props.originData, originData: this.props.originData};\r\n    getOption = (data, depth) => {\r\n        return {\r\n            tooltip: {\r\n                trigger: 'item',\r\n                triggerOn: 'mousemove',\r\n                textStyle: {\r\n                    fontSize: 25,\r\n                    lineHeight: 100\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'tree',\r\n                    data: [data],\r\n                    top: '1%',\r\n                    left: '10%',\r\n                    // left: this.props.orient === 'LR' ? '20%' : '30%',\r\n                    bottom: '1%',\r\n                    right: '10%',\r\n                    // right: this.props.orient === 'LR' ? '30%' : '20%',\r\n                    orient: this.props.orient,\r\n                    // roam: true,\r\n                    symbolSize: 7,\r\n                    // width: 1024,\r\n                    // height: 2024,\r\n                    label: {\r\n                        position: this.props.orient === 'LR' ? 'left' : 'right',\r\n                        verticalAlign: 'middle',\r\n                        align: this.props.orient === 'LR' ? 'right' : 'left',\r\n                        formatter: (params) => {\r\n                            let words = params.data.name.split(' ');\r\n                            if (words.length > 3) {\r\n                                if (this.props.orient === 'LR')\r\n                                    words = words.slice(0, 3).concat('...');\r\n                                else\r\n                                    words = ['...'].concat(words.slice(words.length - 3, words.length));\r\n                            }\r\n                            return words.join(' ');\r\n                        }\r\n                    },\r\n                    tooltip: {\r\n                        formatter: (params) => {\r\n                            const freq = params.data.freq;\r\n                            const content = this.props.orient === 'LR' ? params.data.path.join(' ') : [...params.data.path].reverse().join(' ');\r\n                            return 'freq: ' + freq + ', ' + content;\r\n                        },\r\n                    },\r\n                    leaves: {\r\n                        label: {\r\n                            position: this.props.orient === 'LR' ? 'right' : 'left',\r\n                            verticalAlign: 'middle',\r\n                            align: this.props.orient === 'LR' ? 'left' : 'right',\r\n                        }\r\n                    },\r\n                    initialTreeDepth: depth,\r\n                    expandAndCollapse: true,\r\n                    animationDuration: 550,\r\n                    animationDurationUpdate: 750\r\n                }\r\n            ]\r\n        }\r\n    };\r\n    onClick = (params) => {\r\n        console.log(params);\r\n        let clicked_id = params.data.id;\r\n        let newData = JSON.parse(JSON.stringify(this.props.originData)); //deep copy\r\n        let id_to_node = {};\r\n        dfs(newData, (node) => {\r\n            id_to_node[node.id] = node;\r\n        });\r\n        let current_node = id_to_node[clicked_id];\r\n        while (current_node.parent_id !== null) {\r\n            let parent_node = id_to_node[current_node.parent_id];\r\n            parent_node.children = [current_node];\r\n            current_node = parent_node;\r\n        }\r\n        this.setState({data: newData});\r\n    };\r\n\r\n    static getDerivedStateFromProps(props, current_state) {\r\n        if (current_state.originData !== props.originData)\r\n            return {\r\n                data: props.originData,\r\n                originData: props.originData,\r\n            };\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let data = this.state.data;\r\n        const depthAndSpace = this.preProcess(data, 50);\r\n        const depth = depthAndSpace.depth;\r\n        const height = 1.5 * depthAndSpace.space;\r\n        // const height = data.children ? 50 * data.children.length : 50;\r\n        // transformData(data, 0, null, height);\r\n        let onEvents = {\r\n            'click': this.onClick,\r\n            'onchartclick': (a, b) => {\r\n                console.log(a);\r\n                console.log(b);\r\n            }\r\n        };\r\n        return (\r\n            <div>\r\n                <ReactEcharts\r\n                    option={this.getOption(data, depth)}\r\n                    style={{height: height, width: '100%'}}\r\n                    onEvents={onEvents}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport _ from 'lodash';\r\nimport {Chart, Geom, Tooltip, Coord, Shape} from \"bizcharts\";\r\nimport DataSet from \"@antv/data-set\";\r\nimport SentimentWords from './data/sentimentWords';\r\n\r\nexport const positive = Array.prototype.concat(...SentimentWords.positive.map(x => x.children));\r\nexport const negative = Array.prototype.concat(...SentimentWords.negative.map(x => x.children));\r\nconst publicUrl = process.env.PUBLIC_URL;\r\nexport const positiveMask = publicUrl + '/img/positive.jpg';\r\nexport const negativeMask = publicUrl + '/img/negative.jpg';\r\n\r\nfunction getTextAttrs(cfg) {\r\n    return _.assign(\r\n        {},\r\n        cfg.style,\r\n        {\r\n            fillOpacity: cfg.opacity,\r\n            fontSize: cfg.origin._origin.size,\r\n            rotate: cfg.origin._origin.rotate,\r\n            text: cfg.origin._origin.text,\r\n            textAlign: \"center\",\r\n            fontFamily: cfg.origin._origin.font,\r\n            fill: cfg.color,\r\n            textBaseline: \"Alphabetic\"\r\n        }\r\n    );\r\n}\r\n\r\n// 给point注册一个词云的shape\r\nShape.registerShape(\"point\", \"cloud\", {\r\n    drawShape(cfg, container) {\r\n        const attrs = getTextAttrs(cfg);\r\n        return container.addShape(\"text\", {\r\n            attrs: _.assign(attrs, {\r\n                x: cfg.x,\r\n                y: cfg.y\r\n            })\r\n        });\r\n    }\r\n});\r\n\r\nexport class Wordcloudmask extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dv: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const dv = new DataSet.View().source(this.props.data);\r\n        const range = dv.range(\"freq\");\r\n        const min = range[0];\r\n        const max = range[1];\r\n        const imageMask = new Image();\r\n        imageMask.crossOrigin = \"./\";\r\n        imageMask.src = this.props.img;\r\n        // \"https://img.alicdn.com/tfs/TB1VAglldfJ8KJjy0FeXXXKEXXa-2333-1200.png\";\r\n\r\n        imageMask.onload = () => {\r\n            dv.transform({\r\n                type: \"tag-cloud\",\r\n                fields: [\"title\", \"freq\"],\r\n                imageMask,\r\n                font: \"Verdana\",\r\n                size: [this.props.size, this.props.size],\r\n                // 宽高设置最好根据 imageMask 做调整\r\n                padding: 0,\r\n                timeInterval: 5000,\r\n\r\n                //max execute time\r\n                rotate() {\r\n                    let random = ~~(Math.random() * 4) % 4;\r\n\r\n                    if (random === 2) {\r\n                        random = 0;\r\n                    }\r\n\r\n                    return random * 90; // 0, 90, 270\r\n                },\r\n\r\n                fontSize(d) {\r\n                    const divisor = (max - min) !== 0 ? (max - min) : 1;\r\n                    return ((d.value - min) / divisor) * (50 - 10) + 15;\r\n                }\r\n            });\r\n            this.setState({\r\n                dv\r\n            })\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const {dv} = this.state;\r\n        const scale = {\r\n            x: {\r\n                nice: true//false\r\n            },\r\n            y: {\r\n                nice: true//false\r\n            }\r\n        };\r\n        if (!dv) return null;\r\n        return <div>\r\n            <Chart\r\n                width={this.props.size}\r\n                height={this.props.size}\r\n                data={dv}\r\n                scale={scale}\r\n                padding={0}\r\n                onPointClick={(d) => this.props.onChange(d.data._origin.title)}\r\n                //forceFit\r\n            >\r\n                <Tooltip showTitle={false}/>\r\n                <Coord reflect=\"y\"/>\r\n                <Geom type=\"point\" position=\"x*y\" color=\"text\" shape={this.props.shape} tooltip='freq'\r\n                    // select={[true, d => {\r\n                    //     console.log(d);\r\n                    //     return {\r\n                    //         mode: 'single', // 选中模式，单选、多选\r\n                    //         style: {}, // 选中后 shape 的样式\r\n                    //         cancelable: true, // 选中之后是否允许取消选中，默认允许取消选中\r\n                    //         animate: true // 选中是否执行动画，默认执行动画\r\n                    //     };\r\n                    // }]}\r\n                />\r\n            </Chart>\r\n        </div>;\r\n    }\r\n}\r\n\r\nWordcloudmask.defaultProps = {data: positive, img: positiveMask, size: window.innerWidth / 3, shape: 'cloud'};","import React, {Component} from 'react';\r\nimport {Row, Col, Radio, Divider} from \"antd\";\r\nimport {SearchTree} from \"./searchTree\";\r\nimport {WordTree} from \"./wordTree\";\r\nimport {Wordcloudmask} from \"./wordCloud\";\r\nimport sentimentWords from './data/sentimentWords';\r\nimport wordTrees from './data/wordTrees';\r\nimport {positive, negative, positiveMask, negativeMask} from \"./wordCloud\";\r\n\r\nconst positiveWords = Array.prototype.concat(...sentimentWords.positive.map(x => x.children)).map(node => node.title);\r\nconst negativeWords = Array.prototype.concat(...sentimentWords.negative.map(x => x.children)).map(node => node.title);\r\n\r\nexport class Main extends Component {\r\n    state = {\r\n        selectedWord: null,\r\n        selectedType: 'positive',\r\n        orient: 'after',\r\n    };\r\n\r\n    wordTree = () => {\r\n        if (!(this.state.selectedWord))\r\n            return <div/>;\r\n        const orient = this.state.orient === 'before' ? 'RL' : 'LR';\r\n        return (\r\n            <div className='center'>\r\n                <h1>Word Tree for {this.state.selectedType} sentiment word {this.state.selectedWord}</h1>\r\n                <Radio.Group buttonStyle=\"solid\" size='large' onChange={e => this.setState({orient: e.target.value})}\r\n                             value={this.state.orient}>\r\n                    <Radio.Button value='before'>words before {this.state.selectedWord}</Radio.Button>\r\n                    <Radio.Button value='after'>words after {this.state.selectedWord}</Radio.Button>\r\n                </Radio.Group>\r\n                <WordTree originData={wordTrees[this.state.selectedType][this.state.selectedWord][this.state.orient]}\r\n                          orient={orient}/>\r\n            </div>\r\n        )\r\n    };\r\n    onWordSelect = (selectedWords) => {\r\n        if (!selectedWords || selectedWords.length === 0)\r\n            this.setState({selectedWord: null});\r\n        else {\r\n            const selectedWord = selectedWords[0];\r\n            const selectedType = positiveWords.indexOf(selectedWord) > -1 ? 'positive' : negativeWords.indexOf(selectedWord) > -1 ? 'negative' : null;\r\n            if (selectedType === null)\r\n                this.setState({selectedWord: null, selectedType: null});\r\n            else\r\n                this.setState({selectedWord, selectedType});\r\n        }\r\n    };\r\n    onChange = value => {\r\n        if (!value)\r\n            this.setState({selectedWord: null});\r\n        else {\r\n            const selectedWord = value;\r\n            const selectedType = positiveWords.indexOf(selectedWord) > -1 ? 'positive' : negativeWords.indexOf(selectedWord) > -1 ? 'negative' : null;\r\n            if (selectedType === null)\r\n                this.setState({selectedWord: null, selectedType: null});\r\n            else\r\n                this.setState({selectedWord, selectedType});\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id='searchTree'>\r\n                    <Row type=\"flex\" justify=\"space-around\">\r\n                        {/*<Col span={8}><SearchTree data={sentimentWords.positive}*/}\r\n                        {/*onSelect={this.onWordSelect.bind(this)}/></Col>*/}\r\n                        {/*<Col span={8}><SearchTree data={sentimentWords.negative}*/}\r\n                        {/*onSelect={this.onWordSelect.bind(this)}/></Col>*/}\r\n                        <Col span={8} className='center'>\r\n                            <Divider><h1>Positive Words</h1></Divider>\r\n                            <SearchTree data={sentimentWords.positive} value={this.state.value}\r\n                                        onChange={this.onChange.bind(this)} placeholder='Select a positive word'/>\r\n                            <Wordcloudmask data={positive} img={positiveMask} shape='cloud'\r\n                                           size={550}//{Math.floor(window.innerWidth / 3)}\r\n                                           onChange={this.onChange.bind(this)}/>\r\n                        </Col>\r\n                        <Col span={8} className='center'>\r\n                            <Divider><h1>Negative Words</h1></Divider>\r\n                            <SearchTree data={sentimentWords.negative} value={this.state.value}\r\n                                        onChange={this.onChange.bind(this)} placeholder='Select a negative word'/>\r\n                            <Wordcloudmask data={negative} img={negativeMask} shape='cloud'\r\n                                           size={550}//{Math.floor(window.innerWidth / 3)}\r\n                                           onChange={this.onChange.bind(this)}/>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                <div id='wordTree'>\r\n                    {this.wordTree()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Main} from \"./main\";\nimport './main.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}